import math
import time
import random
import os

# Customizable parameters
N = 20  # Height (rows)
M = 40  # Width (columns)
Q = 5   # Number of fish
FISH_SPEED = 1.5  # Units per frame (calm speed)
BUBBLE_SPEED = 1.0  # Units per frame (gentle rise)
BUBBLE_FREQ = 0.3  # Probability of new bubble per frame (0-1)

class Fish:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.angle = random.uniform(0, 2 * math.pi)  # Random initial direction
        self.speed = FISH_SPEED

    def move(self):
        self.x += self.speed * math.cos(self.angle)
        self.y += self.speed * math.sin(self.angle)

    def reflect(self, is_wall=False):
        # Basic reflection with randomization
        if is_wall:
            # Randomize slightly for natural feel
            self.angle = math.pi - self.angle + random.uniform(-0.2, 0.2)
        else:
            self.angle = -self.angle + random.uniform(-0.2, 0.2)
        self.angle %= (2 * math.pi)

    def get_symbol(self):
        # Simple triangle-ish symbols based on angle
        if -math.pi/4 < self.angle <= math.pi/4:
            return '>'  # Right
        elif math.pi/4 < self.angle <= 3*math.pi/4:
            return '^'  # Up
        elif 3*math.pi/4 < self.angle <= 5*math.pi/4:
            return '<'  # Left
        else:
            return 'v'  # Down

class Bubble:
    def __init__(self, x, size):
        self.x = x
        self.y = N - 1  # Start at bottom
        self.size = size  # Number of 'o's vertically
        self.speed = BUBBLE_SPEED

    def move(self):
        self.y -= self.speed

    def is_offscreen(self):
        return self.y + self.size < 0

# Initialize simulation
fish_list = [Fish(random.uniform(1, M-2), random.uniform(1, N-2)) for _ in range(Q)]
bubbles = []

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def draw_grid():
    grid = [[' ' for _ in range(M)] for _ in range(N)]
    
    # Draw bubbles (as vertical 'o' clusters)
    for bubble in bubbles:
        for i in range(bubble.size):
            by = int(bubble.y - i)
            if 0 <= by < N:
                bx = int(bubble.x)
                if 0 <= bx < M:
                    grid[by][bx] = 'o'
    
    # Draw fish (overlay on top)
    for fish in fish_list:
        fx, fy = int(fish.x), int(fish.y)
        if 0 <= fx < M and 0 <= fy < N:
            grid[fy][fx] = fish.get_symbol()
    
    # Print grid with borders
    print('+' + '-' * M + '+')
    for row in grid:
        print('|' + ''.join(row) + '|')
    print('+' + '-' * M + '+')

while True:
    clear_screen()
    
    # Update fish
    for fish in fish_list:
        fish.move()
        
        # Wall collisions
        if fish.x < 0 or fish.x >= M:
            fish.x = max(0, min(M-1, fish.x))  # Clamp
            fish.reflect(is_wall=True)
        if fish.y < 0 or fish.y >= N:
            fish.y = max(0, min(N-1, fish.y))  # Clamp
            fish.reflect(is_wall=True)
    
    # Fish-fish collisions (simple distance check)
    for i in range(len(fish_list)):
        for j in range(i+1, len(fish_list)):
            f1, f2 = fish_list[i], fish_list[j]
            dist = math.hypot(f1.x - f2.x, f1.y - f2.y)
            if dist < 1.5:  # Close enough to collide
                f1.reflect()
                f2.reflect()
    
    # Update bubbles
    for bubble in bubbles:
        bubble.move()
    bubbles = [b for b in bubbles if not b.is_offscreen()]  # Remove off-screen
    
    # Randomly add new bubbles from bottom
    if random.random() < BUBBLE_FREQ:
        bubbles.append(Bubble(random.uniform(0, M-1), random.randint(1, 3)))
    
    # Draw and sleep for 10 FPS
    draw_grid()
    time.sleep(0.1)
