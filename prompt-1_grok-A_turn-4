import curses
import math
import time
import random

# Customizable parameters
N = 20  # Height (rows); auto-adjusts
M = 40  # Width (columns); auto-adjusts
Q = 5   # Number of fish
FISH_SPEED = 1.5  # Units per frame
BUBBLE_SPEED = 1.0  # Units per frame
BUBBLE_FREQ = 0.3  # Probability of new bubble
MAX_BOUNCES_PER_SEC = 2  # Heuristic limit

# Colors
COLOR_FISH = 1  # Yellow
COLOR_BUBBLE = 2  # Light cyan
COLOR_BORDER = 3  # White
COLOR_CORAL = 4  # Gray for subtle coral

class Fish:
    def __init__(self, x, y, max_x, max_y):
        self.x = x
        self.y = y
        self.angle = random.uniform(0, 2 * math.pi)
        self.speed = FISH_SPEED
        self.size = random.randint(1, 3)
        self.max_x = max_x
        self.max_y = max_y
        self.bounce_times = []  # Timestamps of recent bounces

    def move(self):
        self.x += self.speed * math.cos(self.angle)
        self.y += self.speed * math.sin(self.angle)

    def reflect(self, is_wall=False):
        current_time = time.time()
        # Clean old bounces (older than 1 second)
        self.bounce_times = [t for t in self.bounce_times if current_time - t < 1]
        
        if len(self.bounce_times) >= MAX_BOUNCES_PER_SEC:
            # Too many bounces: Redirect toward center instead
            center_x, center_y = self.max_x / 2, self.max_y / 2
            dx, dy = center_x - self.x, center_y - self.y
            self.angle = math.atan2(dy, dx) + random.uniform(-0.5, 0.5)  # Gentle turn to center
        else:
            # Normal reflect
            if is_wall:
                self.angle = math.pi - self.angle + random.uniform(-0.3, 0.3)
            else:
                self.angle = -self.angle + random.uniform(-0.3, 0.3)
            self.bounce_times.append(current_time)
        self.angle %= (2 * math.pi)

    def handle_walls(self):
        half_size = self.size / 2 + 0.5  # Buffer to avoid sticking
        bounced = False
        if self.x - half_size < 0:
            self.x = half_size + 0.5
            self.reflect(is_wall=True)
            bounced = True
        elif self.x + half_size >= self.max_x:
            self.x = self.max_x - half_size - 0.5
            self.reflect(is_wall=True)
            bounced = True
        if self.y - half_size < 0:
            self.y = half_size + 0.5
            self.reflect(is_wall=True)
            bounced = True
        elif self.y + half_size >= self.max_y:
            self.y = self.max_y - half_size - 0.5
            self.reflect(is_wall=True)
            bounced = True
        return bounced

    def get_sprite(self):
        # Same 2D sprites as before (omitted for brevity; use the previous version's get_sprite)

class Bubble:
    # Same as before (omitted for brevity)

def generate_coral(max_x, max_y):
    coral = []
    num_coral = random.randint(3, 5)  # Subtle amount
    for _ in range(num_coral):
        x = random.randint(1, max_x - 4)
        height = random.randint(2, 4)
        coral.append({'x': x, 'height': height})
    return coral

def draw_coral(stdscr, coral, max_y):
    for c in coral:
        for i in range(c['height']):
            gy = max_y - i
            stdscr.addch(gy, c['x'] + 1, '|', curses.color_pair(COLOR_CORAL))  # Stem
            if i == 0:
                stdscr.addch(gy, c['x'], '/', curses.color_pair(COLOR_CORAL))
                stdscr.addch(gy, c['x'] + 2, '\\', curses.color_pair(COLOR_CORAL))  # Top fronds

def main(stdscr):
    global N, M
    curses.curs_set(0)
    stdscr.nodelay(True)
    N, M = stdscr.getmaxyx()
    N -= 2
    M -= 2
    N = max(10, N)
    M = max(20, M)

    curses.start_color()
    curses.init_pair(COLOR_FISH, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(COLOR_BUBBLE, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(COLOR_BORDER, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(COLOR_CORAL, curses.COLOR_GREEN, curses.COLOR_BLACK)  # Subtle green-gray

    fish_list = [Fish(random.uniform(2, M-3), random.uniform(2, N-5), M, N) for _ in range(Q)]  # Start higher to avoid coral
    bubbles = []
    coral = generate_coral(M, N)  # Static coral

    while True:
        stdscr.clear()
        stdscr.border()

        # Draw coral (static)
        draw_coral(stdscr, coral, N + 1)

        # Update and draw bubbles (same as before)

        # Update and draw fish
        for fish in fish_list:
            fish.move()
            fish.handle_walls()
            # Draw fish sprite (same as before)

        # Fish collisions (same as before, with reflect using the new logic)

        # Add new bubbles (same)

        stdscr.refresh()
        time.sleep(0.1)

        if stdscr.getch() == ord('q'):
            break

if __name__ == "__main__":
    curses.wrapper(main)
