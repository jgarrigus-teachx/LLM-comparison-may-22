import random
import time
import os
import math
import sys

# ANSI color codes for a nice aquarium feel
BLUE = '\033[94m'
CYAN = '\033[96m'
YELLOW = '\033[93m'
GREEN = '\033[92m'
MAGENTA = '\033[95m'
RED = '\033[91m'
RESET = '\033[0m'
CLEAR = '\033[2J\033[H'

class Fish:
    def __init__(self, x, y, dx, dy, color):
        self.x = x
        self.y = y
        self.dx = dx  # velocity in x direction
        self.dy = dy  # velocity in y direction
        self.color = color
        self.size = random.randint(1, 3)  # Fish size 1-3 characters
        self.update_symbol()
    
    def update_symbol(self):
        # Update fish symbol based on direction and size
        angle = math.atan2(self.dy, self.dx)
        if -math.pi/4 <= angle <= math.pi/4:  # Right
            if self.size == 1:
                self.symbols = ['>']
            elif self.size == 2:
                self.symbols = ['>)']
            else:
                self.symbols = ['>))']
        elif math.pi/4 < angle <= 3*math.pi/4:  # Down
            if self.size == 1:
                self.symbols = ['v']
            elif self.size == 2:
                self.symbols = ['v', ')']
            else:
                self.symbols = ['v', '))', ' ']
        elif -3*math.pi/4 <= angle < -math.pi/4:  # Up
            if self.size == 1:
                self.symbols = ['^']
            elif self.size == 2:
                self.symbols = [')', '^']
            else:
                self.symbols = [' ', '))', '^']
        else:  # Left
            if self.size == 1:
                self.symbols = ['<']
            elif self.size == 2:
                self.symbols = ['(<']
            else:
                self.symbols = ['((<']
    
    def move(self, width, height, other_fish):
        # Store old position
        old_x, old_y = self.x, self.y
        
        # Update position
        self.x += self.dx
        self.y += self.dy
        
        # Check wall collisions
        if self.x <= 0 or self.x >= width - 1 - self.size:
            self.dx = -self.dx + random.uniform(-0.2, 0.2)
            self.x = max(1, min(width - 2 - self.size, self.x))
        
        if self.y <= 0 or self.y >= height - 1:
            self.dy = -self.dy + random.uniform(-0.2, 0.2)
            self.y = max(1, min(height - 2, self.y))
        
        # Check fish collisions
        for other in other_fish:
            if other != self:
                dist = math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
                if dist < self.size + other.size:  # Collision threshold based on size
                    # Reflect and add randomization
                    self.dx = -self.dx + random.uniform(-0.3, 0.3)
                    self.dy = -self.dy + random.uniform(-0.3, 0.3)
                    # Move back to old position
                    self.x, self.y = old_x, old_y
        
        # Normalize speed to keep it constant
        speed = math.sqrt(self.dx**2 + self.dy**2)
        if speed > 0:
            self.dx = (self.dx / speed) * 0.7  # Slow, relaxing speed
            self.dy = (self.dy / speed) * 0.7
        
        self.update_symbol()

class Bubble:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = random.randint(1, 3)  # Bubble width 1-3 characters
        if self.width == 1:
            self.symbols = ['o']
        elif self.width == 2:
            self.symbols = ['oO']
        else:
            self.symbols = ['oOo']
    
    def move(self):
        self.y -= 0.3  # Slow upward movement
        # Slight horizontal drift
        self.x += random.uniform(-0.1, 0.1)

class Fishtank:
    def __init__(self, width=60, height=25, num_fish=6):
        self.width = width
        self.height = height
        self.fish = []
        self.bubbles = []
        self.frame = 0
        
        # Create fish with random positions and velocities
        fish_colors = [YELLOW, GREEN, MAGENTA, RED, CYAN, YELLOW]
        for i in range(num_fish):
            x = random.uniform(5, width - 5)
            y = random.uniform(5, height - 5)
            angle = random.uniform(0, 2 * math.pi)
            speed = 0.7
            dx = speed * math.cos(angle)
            dy = speed * math.sin(angle)
            color = fish_colors[i % len(fish_colors)]
            self.fish.append(Fish(x, y, dx, dy, color))
    
    def add_bubble(self):
        # Randomly add bubbles from the bottom
        if random.random() < 0.15:  # 15% chance each frame
            x = random.uniform(3, self.width - 3)
            y = self.height - 1
            self.bubbles.append(Bubble(x, y))
    
    def update(self):
        # Move fish
        for fish in self.fish:
            fish.move(self.width, self.height, self.fish)
        
        # Move bubbles and remove off-screen ones
        self.bubbles = [b for b in self.bubbles if b.y > 0]
        for bubble in self.bubbles:
            bubble.move()
        
        # Add new bubbles
        self.add_bubble()
        
        self.frame += 1
    
    def render(self):
        # Create empty tank
        tank = [[' ' for _ in range(self.width)] for _ in range(self.height)]
        
        # Draw borders
        for x in range(self.width):
            tank[0][x] = '‚îÄ'
            tank[self.height-1][x] = '‚îÄ'
        for y in range(self.height):
            tank[y][0] = '‚îÇ'
            tank[y][self.width-1] = '‚îÇ'
        
        # Corners
        tank[0][0] = '‚îå'
        tank[0][self.width-1] = '‚îê'
        tank[self.height-1][0] = '‚îî'
        tank[self.height-1][self.width-1] = '‚îò'
        
        # Draw bubbles
        for bubble in self.bubbles:
            x, y = int(bubble.x), int(bubble.y)
            for i, symbol_part in enumerate(bubble.symbols):
                for j, char in enumerate(symbol_part):
                    if 0 < x + j < self.width - 1 and 0 < y < self.height - 1:
                        tank[y][x + j] = CYAN + char + RESET
        
        # Draw fish (on top)
        for fish in self.fish:
            x, y = int(fish.x), int(fish.y)
            # Handle multi-line fish symbols
            if len(fish.symbols) == 1:
                # Single line fish
                for i, char in enumerate(fish.symbols[0]):
                    if 0 < x + i < self.width - 1 and 0 < y < self.height - 1:
                        tank[y][x + i] = fish.color + char + RESET
            else:
                # Multi-line fish (vertical)
                for line_num, line in enumerate(fish.symbols):
                    for i, char in enumerate(line):
                        if char != ' ' and 0 < x + i < self.width - 1 and 0 < y + line_num < self.height - 1:
                            tank[y + line_num][x + i] = fish.color + char + RESET
        
        # Convert to string
        output = CLEAR
        for row in tank:
            output += ''.join(row) + '\n'
        
        return output

def main():
    # Set up terminal
    if os.name == 'nt':  # Windows
        os.system('cls')
    else:  # Unix/Linux/Mac
        os.system('clear')
    
    print("üê† ASCII Fishtank Simulation üê†")
    print("Press Ctrl+C to exit\n")
    time.sleep(2)
    
    # Create fishtank
    tank = Fishtank(width=60, height=25, num_fish=6)
    
    try:
        while True:
            # Update simulation
            tank.update()
            
            # Render and display
            print(tank.render(), end='')
            
            # Control frame rate (10 FPS)
            time.sleep(0.1)
            
    except KeyboardInterrupt:
        # Clean exit
        print("\n\nThanks for watching the fish! üê†")
        sys.exit(0)

if __name__ == "__main__":
    main()
